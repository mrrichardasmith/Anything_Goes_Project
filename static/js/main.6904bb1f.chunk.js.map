{"version":3,"sources":["Components/BarChart/BarChart.js","Components/Table/Table.js","Components/RadarChart/RadarChart.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["BarChart","props","chartContainer","useRef","useState","chartInstance","setChartInstance","randomInt","Math","floor","random","chartConfig","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","yAxes","ticks","beginAtZero","useEffect","current","newChartInstance","Chartjs","className","ref","onClick","datasetIndex","newData","update","Table","RadarChart","config","elements","line","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6904bb1f.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './BarChart.css';\r\nimport Chartjs from 'chart.js/auto';\r\n\r\n\r\nexport default function BarChart(props)    {\r\n\r\n    const chartContainer = useRef(null);\r\n    const [chartInstance, setChartInstance] = useState(null);\r\n\r\n    const randomInt = () => Math.floor(Math.random() * (10 - 1 + 1)) + 1;\r\n\r\n    const chartConfig = {\r\n        type: \"bar\",\r\n        data: {\r\n          labels: [\"Money\", \"Competition\", \"Academic\", \"Cameraderie\", \"Career\", \"Perspective\"],\r\n          datasets: [\r\n            {\r\n              label: \"Primary Motivation\",\r\n              data: [12, 19, 3, 5, 2, 3],\r\n              backgroundColor: [\r\n                \"rgba(255, 99, 132, 0.2)\",\r\n                \"rgba(54, 162, 235, 0.2)\",\r\n                \"rgba(255, 206, 86, 0.2)\",\r\n                \"rgba(75, 192, 192, 0.2)\",\r\n                \"rgba(153, 102, 255, 0.2)\",\r\n                \"rgba(255, 159, 64, 0.2)\"\r\n              ],\r\n              borderColor: [\r\n                \"rgba(255, 99, 132, 1)\",\r\n                \"rgba(54, 162, 235, 1)\",\r\n                \"rgba(255, 206, 86, 1)\",\r\n                \"rgba(75, 192, 192, 1)\",\r\n                \"rgba(153, 102, 255, 1)\",\r\n                \"rgba(255, 159, 64, 1)\"\r\n              ],\r\n              borderWidth: 1\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          scales: {\r\n            yAxes: [\r\n              {\r\n                ticks: {\r\n                  beginAtZero: true\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      };\r\n\r\n      const updateDataset = (datasetIndex, newData) => {\r\n        chartInstance.data.datasets[datasetIndex].data = newData;\r\n        chartInstance.update();\r\n      };\r\n\r\n      const onButtonClick = () => {\r\n        const data = [\r\n            randomInt(),\r\n            randomInt(),\r\n            randomInt(),\r\n            randomInt(),\r\n            randomInt(),\r\n            randomInt()\r\n          ];\r\n          updateDataset(0, data);\r\n      };\r\n\r\n      useEffect(() => {\r\n        if (chartContainer && chartContainer.current) {\r\n          const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n          setChartInstance(newChartInstance);\r\n        }\r\n      }, [chartContainer]);\r\n    \r\n    \r\n    return  (\r\n        <div className=\"container\">\r\n            <div>\r\n                <canvas ref={chartContainer} />\r\n            </div>\r\n              <div className=\"button\" type=\"submit\" onClick={onButtonClick}>Change Data</div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './Table.css';\r\n\r\nexport default function Table(props)  {\r\n\r\n    return  (\r\n       \r\n       <div>\r\n            <h2 className=\"table\">\r\n                Create a table component filled with data from Faker.js\r\n            </h2>\r\n        </div>\r\n\r\n    )\r\n}","import React, { useState, useEffect, useRef } from 'react';\r\nimport './RadarChart.css';\r\nimport Chartjs from 'chart.js/auto';\r\n\r\n\r\nexport default function RadarChart(props)  {\r\n\r\n    const chartContainer = useRef(null);\r\n    const [chartInstance, setChartInstance] = useState(null);\r\n\r\n    const randomInt = () => Math.floor(Math.floor(Math.random()*(100-1+1)+1));\r\n\r\n    const data = {\r\n        // Change number of labels to test label positioning variation:\r\n        // Including a multi-line label for testing\r\n        labels: [\"Eating\", [\"Drinking\", \"water\"], \"Sleeping\", \"Designing\", \"Coding\", \"Cycling\"],\r\n        datasets: [\r\n            {\r\n                label: \"1\",\r\n                data: [65, 59, 90, 81, 56, 55],\r\n                backgroundColor: 'rgba(153, 153, 255, 0.1)'\r\n            },\r\n            {\r\n                label: \"2\",\r\n                data: [28, 48, 40, 19, 96, 27],\r\n                backgroundColor: 'rgba(255, 153, 153, 0.1)'\r\n            }\r\n        ]\r\n    };\r\n\r\n    const config = {\r\n        type: 'radar',\r\n        data: data,\r\n        options: {\r\n          elements: {\r\n            line: {\r\n              borderWidth: 3\r\n            }\r\n          }\r\n        },\r\n      };\r\n\r\n      const updateDataset = (datasetIndex, newData) => {\r\n        chartInstance.data.datasets[datasetIndex].data = newData;\r\n        chartInstance.update();\r\n      };\r\n\r\n      useEffect(() => {\r\n        if (chartContainer && chartContainer.current) {\r\n          const newChartInstance = new Chartjs(chartContainer.current, config);\r\n          setChartInstance(newChartInstance);\r\n        }\r\n      }, [chartContainer]);\r\n\r\n      const onButtonClick = () => {\r\n        const data = [\r\n            randomInt(),\r\n            randomInt(),\r\n            randomInt(),\r\n            randomInt(),\r\n            randomInt(),\r\n            randomInt()\r\n          ];\r\n          updateDataset(0, data);\r\n      };\r\n\r\n      \r\n    \r\n    return  (\r\n        <div className=\"container\">\r\n          <div>\r\n            <canvas ref={chartContainer} />\r\n          </div>\r\n          <div className=\"button\" type=\"submit\" onClick={onButtonClick}>Change Data</div>\r\n        </div>\r\n    )\r\n}","import './App.css';\r\nimport faker from  'faker'; \r\nimport ChartLibrary from 'chart.js/auto';\r\n\r\nimport BarChart from '../BarChart/BarChart';\r\nimport Table from '../Table/Table';\r\nimport RadarChart from '../RadarChart/RadarChart';\r\n\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"header\">\r\n          <h1 className=\"title\">The Anything Goes Project</h1>\r\n          <h3 className=\"description\">A project space for collaboration and practicing skill gaps.</h3>\r\n          <br />\r\n      </div>\r\n      <BarChart />\r\n      <RadarChart />\r\n      <Table />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}